local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local InputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer

local CoreGuiSuccess, CoreGuiResult = pcall(function()
	return game:GetService("CoreGui")
end)

local PARENT

local ScriptVersion = "0.0.0.0.3"
local ScriptName = "nicevisibility10000e"

--[[nvm i suck at this]]
--local safe_to_use = false -- not yet, we gotta wait for the game to load or a new version

local _global_success, _global_result = pcall(function()
	local CoreGuiSuccess, CoreGuiResult = pcall(function()
		return game:GetService("CoreGui")
	end)

	local function canAccessCore()
		if not CoreGuiSuccess or not CoreGuiResult then return false end
		return CoreGuiResult:FindFirstChild("RobloxGui") ~= nil
	end

	PARENT = (CoreGuiSuccess and canAccessCore()) and CoreGuiResult or player:WaitForChild("PlayerGui")

	local function compareVersions(v1, v2)
		-- Extract prefix letter (e.g. "A" in "A-0.0.5")
		local prefix1 = v1:match("^([A-Z])") or ""
		local prefix2 = v2:match("^([A-Z])") or ""

		-- If prefixes differ, compare alphabetically (A < B < C)
		if prefix1 ~= prefix2 then
			if prefix1 < prefix2 then return -1 else return 1 end
		end

		-- Compare numeric segments normally
		local p1, p2 = {}, {}
		for num in v1:gmatch("%d+") do table.insert(p1, tonumber(num)) end
		for num in v2:gmatch("%d+") do table.insert(p2, tonumber(num)) end

		for i = 1, math.max(#p1, #p2) do
			local n1, n2 = p1[i] or 0, p2[i] or 0
			if n1 < n2 then return -1 elseif n1 > n2 then return 1 end
		end
		return 0
	end

	if compareVersions(_G.nicevis_version, ScriptVersion) >= 0 then
		print("PLRViewer is already up-to-date globally")
	else
		print("Updating PLRViewer globally")
		_G.nicevis_version = ScriptVersion
	end
end)

local function makeDraggable(UIItem)
	local dragging = false
	local dragStart = nil
	local startPos = nil

	UIItem.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or 
			input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = UIItem.Position
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	InputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
			input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart
			UIItem.Position = UDim2.new(
				startPos.X.Scale, startPos.X.Offset + delta.X,
				startPos.Y.Scale, startPos.Y.Offset + delta.Y
			)
		end
	end)
end

local MessageBindable = Instance.new("BindableEvent")

MessageBindable.Event:Connect(function(buttonPressed)
	if buttonPressed == "Button1" then
		print("Player clicked OK/Yes")
	elseif buttonPressed == "Button2" then
		print("Player clicked Cancel/No")
	end
end)

-- üß≠ Notifications
local function message(title, text, ptime, icon, button1, button2)
	pcall(function()
		StarterGui:SetCore("SendNotification", {
			Title = title,
			Text = text,
			Duration = ptime or 3,
			Icon = icon,
			Button1 = button1,
			Button2 = button2,
			Callback = MessageBindable
		})
	end)
end

local function randomString()
	local length = math.random(32,64)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

task.wait(5)
message("nicevisibility10000e", "Loading interface", 3, "rbxassetid://11843683600")
task.delay(5, function()
	message("Creator Following", "Do you want to follow me?", 5, nil, "Yes", "No")
end)

local GuiMain = _G.nicevis_interface
	if not GuiMain then
	-- üßπ Cleanup old interface before creating a new one
	if _G.nicevis_interface and _G.nicevis_interface.Parent then
	    _G.nicevis_interface:Destroy()
	    _G.nicevis_interface = nil
	end
	GuiMain = Instance.new("ScreenGui")
	GuiMain.Enabled = true
	GuiMain.IgnoreGuiInset = true
	GuiMain.ResetOnSpawn = false
	GuiMain.Parent = PARENT
	_G.nicevis_interface = GuiMain
end
GuiMain.Name = randomString()

local main_frame = Instance.new("Frame")
main_frame.Size = UDim2.new(0, 250, 0, 300)
main_frame.Position = UDim2.new(0.5, -125, 0.5, -130)
main_frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
main_frame.BorderSizePixel = 0
main_frame.Parent = GuiMain

-- üïπÔ∏è QEWASD Frame
local controls_frame = Instance.new("Frame")
controls_frame.Size = UDim2.new(0, 200, 0, 150)
controls_frame.Position = UDim2.new(0.5, -100, 0.5, -150)
controls_frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
controls_frame.BorderSizePixel = 0
controls_frame.Visible = false -- hidden by default
controls_frame.Parent = GuiMain

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
title.Text = ScriptName.." v"..ScriptVersion
title.Font = Enum.Font.SourceSansBold
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 18
title.Parent = main_frame
makeDraggable(main_frame)
makeDraggable(controls_frame)

-- Global variables
_G.NV_OFFSET = _G.NV_OFFSET or 500
_G.NV_CFSPEED = _G.NV_CFSPEED or 50
_G.NV_OFFSET_BOOL = _G.NV_OFFSET_BOOL or false
_G.NV_SPEED_ENABLED = _G.NV_SPEED_ENABLED or false
_G.NV_SPEED_CONNECTION = _G.NV_SPEED_CONNECTION or nil
_G.NV_DIED = _G.NV_DIED or false

_G.NV_CHARACTER = _G.NV_CHARACTER or nil
_G.NV_HUMANOID = _G.NV_HUMANOID or nil
_G.NV_HRP = _G.NV_HRP or nil
_G.NV_CAM = _G.NV_CAM or nil

-- Y freeze globals
_G.NV_Y_FREEZE_CONNECTION = _G.NV_Y_FREEZE_CONNECTION or nil
_G.NV_SPOOFC_CONNECTION = _G.NV_SPOOFC_CONNECTION or nil
_G.NV_Y_ADJUST_CONNECTION = _G.NV_Y_ADJUST_CONNECTION or nil
_G.NV_FROZEN_Y = _G.NV_FROZEN_Y or 0
_G.NV_Y_FROZEN = _G.NV_Y_FROZEN or false

local offset = _G.NV_OFFSET
local CFSpeed = _G.NV_CFSPEED
local offset_bool = _G.NV_OFFSET_BOOL
local speed_enabled = _G.NV_SPEED_ENABLED
local speed_connection = _G.NV_SPEED_CONNECTION
local died = _G.NV_DIED

local univ_character = _G.NV_CHARACTER
local univ_humanoid = _G.NV_HUMANOID
local univ_hrp = _G.NV_HRP
local univ_cam = _G.NV_CAM

-- Y freeze variables
local y_freeze_connection = _G.NV_Y_FREEZE_CONNECTION
local spoofc_connection = _G.NV_SPOOFC_CONNECTION
local y_adjust_connection = _G.NV_Y_ADJUST_CONNECTION -- üß† Adjust frozen Y position gradually
local frozen_y = _G.NV_FROZEN_Y
local y_frozen = _G.NV_Y_FROZEN -- ‚úÖ track Y freeze state

-- ‚ö° CFrame speed (includes Q/E support)
local vertical_dir = 0

-- Helper function for textboxes
local function createVariableEditor(name, variable, yPos, callback)
	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(0.5, -5, 0, 25)
	label.Position = UDim2.new(0, 5, 0, yPos)
	label.BackgroundTransparency = 1
	label.Text = name .. ":"
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = main_frame

	local box = Instance.new("TextBox")
	box.Size = UDim2.new(0.5, -10, 0, 25)
	box.Position = UDim2.new(0.5, 5, 0, yPos)
	box.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	box.Text = tostring(variable)
	box.TextColor3 = Color3.fromRGB(255, 255, 255)
	box.ClearTextOnFocus = false
	box.Parent = main_frame

	box.FocusLost:Connect(function()
		local num = tonumber(box.Text)
		if num then
			callback(num)
			box.Text = tostring(num)
		else
			box.Text = tostring(variable)
		end
	end)
end

-- Helper for buttons
local function createButton(text, yPos, color, callback)
	local button = Instance.new("TextButton")
	button.Size = UDim2.new(1, -10, 0, 30)
	button.Position = UDim2.new(0, 5, 0, yPos)
	button.BackgroundColor3 = color
	button.Text = text
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.Font = Enum.Font.SourceSansBold
	button.TextSize = 16
	button.Parent = main_frame

	button.MouseButton1Click:Connect(function()
		TweenService:Create(button, TweenInfo.new(0.1), {
			BackgroundColor3 = Color3.fromRGB(100, 100, 100)
		}):Play()
		task.wait(0.1)
		TweenService:Create(button, TweenInfo.new(0.2), {
			BackgroundColor3 = color
		}):Play()
		callback()
	end)
end

-- Function to move the character in full 3D relative to the camera
local function moveCharacter(directionVector, dt)
	if not (univ_hrp and univ_cam) then return end

	local camCFrame = univ_cam.CFrame
	local right = camCFrame.RightVector
	local forward = Vector3.new(camCFrame.LookVector.X, 0, camCFrame.LookVector.Z).Unit
	local up = Vector3.new(0, 1, 0)

	local moveVector = right * directionVector.X + forward * directionVector.Z + up * directionVector.Y
	univ_hrp.CFrame += moveVector * (CFSpeed * dt)

	if directionVector.Y ~= 0 then
		frozen_y += directionVector.Y * (CFSpeed / 2) * dt
	end
end

-- Create interactive control button
local function createControlButton(text, x, y, dirVector)
	local button = Instance.new("TextButton")
	button.Size = UDim2.new(0, 50, 0, 50)
	button.Position = UDim2.new(0, x, 0, y)
	button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.Font = Enum.Font.SourceSansBold
	button.TextSize = 20
	button.Text = text
	button.Parent = controls_frame

	-- Move while button is held
	local holding = false
	button.MouseButton1Down:Connect(function()
		holding = true
		while holding do
			local dt = RunService.RenderStepped:Wait()
			moveCharacter(dirVector, dt)
		end
	end)
	button.MouseButton1Up:Connect(function()
		holding = false
	end)
	button.MouseLeave:Connect(function()
		holding = false
	end)
end

-- üõë Stop all loops
local function stop_all_loops()
	if speed_connection then
		speed_connection:Disconnect()
		speed_connection = nil
	end
	if y_freeze_connection then
		y_freeze_connection:Disconnect()
		y_freeze_connection = nil
	end
	if spoofc_connection then
		spoofc_connection:Disconnect()
		spoofc_connection = nil
	end
end

-- üíÄ Death handling
local function setup_death_connection()
	if not univ_humanoid then return end
	univ_humanoid.Died:Connect(function()
		died = true
		stop_all_loops()
		message("Notice", "You died. Offset/Speed disabled.", 3)
	end)
end

-- ‚ôª Refresh variables
local function refresh_universal_variables()
	univ_character = player.Character or player.CharacterAdded:Wait()
	univ_humanoid = univ_character:FindFirstChildOfClass("Humanoid")
	univ_hrp = univ_character:FindFirstChild("HumanoidRootPart")
	univ_cam = workspace.CurrentCamera

	died = false
	y_frozen = false

	if univ_character and univ_humanoid and univ_hrp and univ_cam then
		message("Variables Refreshed", "All universal references updated.", 2)
		setup_death_connection()
	else
		warn("[Refresh] Some universal variables could not be found.")
	end
end

refresh_universal_variables()

player.CharacterAdded:Connect(function()
	task.wait(1)
	refresh_universal_variables()
end)

-- üé• Camera spoof
local function spoof_cam()
	if spoofc_connection then return end
	spoofc_connection = RunService.Heartbeat:Connect(function()
		if univ_humanoid then
			univ_humanoid.CameraOffset = Vector3.new(0, -offset, 0)
		end
	end)
end

local function stop_spoof_cam()
	if spoofc_connection then
		spoofc_connection:Disconnect()
		spoofc_connection = nil
	end
	if univ_humanoid then
		univ_humanoid.CameraOffset = Vector3.new(0, 0, 0)
	end
end

-- ‚ùÑÔ∏è Freeze Y
local function freeze_y_axis(hrp)
	if y_freeze_connection then return end
	y_frozen = true
	frozen_y = hrp.Position.Y

	y_freeze_connection = RunService.Heartbeat:Connect(function()
		local pos = hrp.Position
		hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
		hrp.CFrame = CFrame.new(pos.X, frozen_y, pos.Z) * hrp.CFrame.Rotation
	end)
end

local function unfreeze_y_axis()
	if y_freeze_connection then
		y_freeze_connection:Disconnect()
		y_freeze_connection = nil
	end
	y_frozen = false
	frozen_y = nil
end

-- ‚ö° CFrame speed (Q/E vertical movement locked when Y frozen)
local function start_cframe_speed()
	if speed_connection then return end
	speed_connection = RunService.RenderStepped:Connect(function(dt)
		if died then
			speed_connection:Disconnect()
			speed_connection = nil
			return
		end
		if not (univ_humanoid and univ_hrp) then return end

		local finalDir = univ_humanoid.MoveDirection

		if finalDir.Magnitude > 0 then
			univ_hrp.CFrame += finalDir.Unit * (CFSpeed * dt)
		end
	end)
end

local function handle_y_freeze_modification(direction)
	if not y_frozen then return end
	if y_adjust_connection then y_adjust_connection:Disconnect() end

	y_adjust_connection = RunService.Heartbeat:Connect(function(dt)
		if not y_frozen then
			y_adjust_connection:Disconnect()
			y_adjust_connection = nil
			return
		end
		-- Adjust frozen_y smoothly
		frozen_y += direction * (CFSpeed * dt / 2) -- speed factor adjustable
	end)
end

local function stop_y_freeze_modification()
	if y_adjust_connection then
		y_adjust_connection:Disconnect()
		y_adjust_connection = nil
	end
end

local function stop_cframe_speed()
	if speed_connection then
		speed_connection:Disconnect()
		speed_connection = nil
	end
end

-- üîÅ Offset toggle
local function set_offset()
	if died then
		message("Error", "Cannot toggle offset while dead!", 3)
		stop_all_loops()
		return
	end

	if not (univ_character and univ_humanoid and univ_hrp and univ_cam) then
		refresh_universal_variables()
		return
	end

	local offset_local = offset
	local hrp = univ_hrp
	local character = univ_character

	if offset_bool then
		hrp.CFrame = hrp.CFrame * CFrame.new(0, offset_local, 0)
		spoof_cam()
		freeze_y_axis(hrp)
		message("Offset Enabled", "Y movement locked", 3)
	else
		unfreeze_y_axis()
		hrp.CFrame = hrp.CFrame * CFrame.new(0, -offset_local, 0)
		stop_spoof_cam()
		message("Offset Disabled", "Y movement restored", 3)
	end
end

-- üïπÔ∏è Input
InputService.InputBegan:Connect(function(input, processed)
	if processed then return end
	if input.KeyCode == Enum.KeyCode.F2 then
		offset_bool = not offset_bool
		set_offset()
	elseif input.KeyCode == Enum.KeyCode.F3 then
		refresh_universal_variables()
	elseif input.KeyCode == Enum.KeyCode.F4 then
		speed_enabled = not speed_enabled
		if speed_enabled and not died then
			start_cframe_speed()
			message("Speed", "CFrame speed enabled.", 2)
		else
			stop_cframe_speed()
			message("Speed", "CFrame speed disabled.", 2)
		end
	elseif input.KeyCode == Enum.KeyCode.Q then
		handle_y_freeze_modification(-1)
	elseif input.KeyCode == Enum.KeyCode.E then
		handle_y_freeze_modification(1)
	end
end)

InputService.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.Q or input.KeyCode == Enum.KeyCode.E then
		stop_y_freeze_modification()
	end
end)

-- Buttons
createButton("‚ôª Refresh Variables", 110, Color3.fromRGB(70, 130, 180), function()
	refresh_universal_variables()
end)

createButton("‚ö° Start/Stop CFrame Speed", 150, Color3.fromRGB(60, 179, 113), function()
	speed_enabled = not speed_enabled
	if speed_enabled then
		start_cframe_speed()
		message("Speed", "CFrame speed enabled.", 2)
	else
		stop_cframe_speed()
		message("Speed", "CFrame speed disabled.", 2)
	end
end)

createButton("‚¨Ü Toggle Offset", 190, Color3.fromRGB(255, 140, 0), function()
	offset_bool = not offset_bool
	set_offset()
end)

-- Variable editors
createVariableEditor("offset", offset, 40, function(num)
	offset = num
	message("Variable Updated", "offset set to " .. num, 2)
end)

createVariableEditor("CFSpeed", CFSpeed, 70, function(num)
	CFSpeed = num
	message("Variable Updated", "CFSpeed set to " .. num, 2)
end)

-- Arrange QEWASD with movement vectors
createControlButton("Q", 10, 10, Vector3.new(0, -1, 0)) -- down
createControlButton("E", 140, 10, Vector3.new(0, 1, 0)) -- up
createControlButton("W", 70, 10, Vector3.new(0, 0, 1)) -- forward
createControlButton("A", 10, 70, Vector3.new(-1, 0, 0)) -- left
createControlButton("S", 70, 70, Vector3.new(0, 0, -1)) -- back
createControlButton("D", 140, 70, Vector3.new(1, 0, 0)) -- right

-- Toggle visibility button
createButton("üéÆ Show Controls", 230, Color3.fromRGB(255, 165, 0), function()
	controls_frame.Visible = not controls_frame.Visible
end)


