local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local InputService = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")
local CollectionService = game:GetService("CollectionService")
local HttpService = game:GetService("HttpService")

local player = Players.LocalPlayer

local CoreGuiSuccess, CoreGuiResult = pcall(function()
	return game:GetService("CoreGui")
end)

local PARENT

local ScriptVersion = "0.0.0.0.5"
local ScriptName = "spookvisibility2025e" --nicevisibility10000e
local ScriptState = "Alpha"

--[[nvm i suck at this]]
--local safe_to_use = false -- not yet, we gotta wait for the game to load or a new version

local _global_success, _global_result = pcall(function()
	local CoreGuiSuccess, CoreGuiResult = pcall(function()
		return game:GetService("CoreGui")
	end)

	local function canAccessCore()
		if not CoreGuiSuccess or not CoreGuiResult then return false end
		return CoreGuiResult:FindFirstChild("RobloxGui") ~= nil
	end

	PARENT = (CoreGuiSuccess and canAccessCore()) and CoreGuiResult or player:WaitForChild("PlayerGui")

	local function compareVersions(v1, v2)
		-- Extract prefix letter (e.g. "A" in "A-0.0.5")
		local prefix1 = v1:match("^([A-Z])") or ""
		local prefix2 = v2:match("^([A-Z])") or ""

		-- If prefixes differ, compare alphabetically (A < B < C)
		if prefix1 ~= prefix2 then
			if prefix1 < prefix2 then return -1 else return 1 end
		end

		-- Compare numeric segments normally
		local p1, p2 = {}, {}
		for num in v1:gmatch("%d+") do table.insert(p1, tonumber(num)) end
		for num in v2:gmatch("%d+") do table.insert(p2, tonumber(num)) end

		for i = 1, math.max(#p1, #p2) do
			local n1, n2 = p1[i] or 0, p2[i] or 0
			if n1 < n2 then return -1 elseif n1 > n2 then return 1 end
		end
		return 0
	end

	if compareVersions(_G.nicevis_version, ScriptVersion) >= 0 then
		print("PLRViewer is already up-to-date globally")
	else
		print("Updating PLRViewer globally")
		_G.nicevis_version = ScriptVersion
	end
end)

local MessageBindable = Instance.new("BindableEvent")

-- 🧭 Notifications
local function message(title, text, ptime, icon, button1, button2)
	pcall(function()
		StarterGui:SetCore("SendNotification", {
			Title = title,
			Text = text,
			Duration = ptime or 3,
			Icon = icon,
			Button1 = button1,
			Button2 = button2,
			Callback = MessageBindable
		})
	end)
end

local function getMonthNumber()
	return tonumber(os.date("%m"))
end

local function getWeekNumber()
	return tonumber(os.date("%W"))
end

local function getDayNumber()
	return tonumber(os.date("%d"))
end

local function makeUIStyles(item)
	if not (item:IsA("Frame") or item:IsA("TextLabel") or item:IsA("TextButton") or item:IsA("TextBox")) then
		return
	end

	local stroke = Instance.new("UIStroke")
	stroke.Color = Color3.fromRGB(255, 255, 255)
	stroke.Thickness = 1
	stroke.Transparency = 0.5
	stroke.Parent = item

	local gradient = Instance.new("UIGradient")
	gradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 255)),
		ColorSequenceKeypoint.new(1, Color3.fromRGB(80, 80, 80))
	})
	gradient.Rotation = 90
	gradient.Parent = item
end

local currently_dragged = {}

local InputService = game:GetService("UserInputService")
local currently_dragged = {}

local function makeDraggable(UIItem, y_draggable, x_draggable)
	local dragging = false
	local dragStart = nil
	local startPos = nil
	local holdStartTime = nil
	local holdConnection = nil

	UIItem.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or 
			input.UserInputType == Enum.UserInputType.Touch then

			holdStartTime = tick()
			dragStart = input.Position
			startPos = UIItem.Position

			-- detect if held for 1 second before starting drag
			holdConnection = game:GetService("RunService").RenderStepped:Connect(function()
				if not dragging and (tick() - holdStartTime) >= 1 then
					message("Drag feature", "you can now drag "..(UIItem.Name or "this UI").." anywhere.", 2)
					dragging = true
					currently_dragged[UIItem] = true
					holdConnection:Disconnect()
					holdConnection = nil
				end
			end)

			-- detect release
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					if holdConnection then
						holdConnection:Disconnect()
						holdConnection = nil
					end

					if dragging then
						dragging = false
						task.delay(0.5, function()
							currently_dragged[UIItem] = nil
						end)
					end
				end
			end)
		end
	end)

	InputService.InputChanged:Connect(function(input)
		if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
			input.UserInputType == Enum.UserInputType.Touch) then
			local delta = input.Position - dragStart

			local newXOffset = x_draggable ~= false and (startPos.X.Offset + delta.X) or startPos.X.Offset
			local newYOffset = y_draggable ~= false and (startPos.Y.Offset + delta.Y) or startPos.Y.Offset

			UIItem.Position = UDim2.new(
				startPos.X.Scale, newXOffset,
				startPos.Y.Scale, newYOffset
			)
		end
	end)
end

MessageBindable.Event:Connect(function(buttonPressed)
	if buttonPressed == "Button1" then
		print("Player clicked OK/Yes")
	elseif buttonPressed == "Button2" then
		print("Player clicked Cancel/No")
	end
end)

local function randomString()
	local length = math.random(32,64)
	local array = {}
	for i = 1, length do
		array[i] = string.char(math.random(32, 126))
	end
	return table.concat(array)
end

task.wait(5)
local formatted_message = 'Loading interface, version "'..ScriptVersion..'"'
message("nicevisibility10000e", formatted_message, 3)
task.delay(5, function()
	message("Creator Following", "Do you want to follow me?", 5, nil, "Yes", "No")
end)

local GuiMain = _G.nicevis_interface
if not GuiMain then
	-- 🧹 Cleanup old interface before creating a new one
	if _G.nicevis_interface and _G.nicevis_interface.Parent then
		_G.nicevis_interface:Destroy()
		_G.nicevis_interface = nil
	end
	GuiMain = Instance.new("ScreenGui")
	GuiMain.Enabled = true
	GuiMain.IgnoreGuiInset = true
	GuiMain.ResetOnSpawn = false
	GuiMain.Parent = PARENT
	_G.nicevis_interface = GuiMain
end
GuiMain.Name = randomString()

local sounds_folder = GuiMain:FindFirstChild("PLAYING_SOUNDS")
if not sounds_folder then
	sounds_folder = Instance.new("Folder")
end
sounds_folder.Name = "PLAYING_SOUNDS"
sounds_folder.Parent = GuiMain

local frame_colors = {
	tc1 = {}, -- will use targetColor
	tc2 = {}, -- will use targetColor2
	tc3 = {}, -- will use targetColor3
	tc4 = {}, -- will use targetColor4
}

local sfx_ids = {}
local bgm_ids = {}

local sounds_json_url = "https://raw.githubusercontent.com/Buddy-Gian251/Roblox-Invisibility-by-nicehouse10000e/refs/heads/main/audio_files.json"

-- optional helper since table.getkeys() doesn’t exist natively:
local function getkeys_fromtable(t)
	local keys = {}
	for k in pairs(t) do
		table.insert(keys, k)
	end
	return keys
end

local function getRandomValueFromTable(t)
	local keys = {}
	for k in pairs(t) do
		table.insert(keys, k)
	end
	if #keys == 0 then return nil end
	local randomKey = keys[math.random(1, #keys)]
	return t[randomKey]
end

local function getSoundsFromJSON()
	if not sounds_json_url or sounds_json_url == "" then
		message("Error", "Missing JSON URL. Please provide a valid JSON URL for your Roblox audio files.", 4)
		return
	end

	local success, result = pcall(function()
		return game:HttpGet(sounds_json_url)
	end)

	if not success then
		message("Error", "Failed to fetch JSON file.", 4)
		warn("[NV JSON] Fetch failed:", result)
		return
	end

	local decodeSuccess, decoded = pcall(function()
		return HttpService:JSONDecode(result)
	end)

	if not decodeSuccess or type(decoded) ~= "table" then
		message("Error", "Invalid JSON format. Please check your JSON file.", 4)
		warn("[NV JSON] Decode failed:", decoded)
		return
	end

	if decoded.sfx_ids and type(decoded.sfx_ids) == "table" then
		sfx_ids = decoded.sfx_ids
	else
		warn("[NV JSON] No 'sfx_ids' found in JSON.")
	end

	if decoded.bgm_ids and type(decoded.bgm_ids) == "table" then
		bgm_ids = decoded.bgm_ids
	else
		warn("[NV JSON] No 'bgm_ids' found in JSON.")
	end

	message("Success", "Audio data loaded successfully.", 3)
	print("[NV JSON] SFX IDs loaded:", #getkeys_fromtable(sfx_ids))
	print("[NV JSON] BGM IDs loaded:", #getkeys_fromtable(bgm_ids))
end

-- call the function
getSoundsFromJSON()

-- Plays a sound and returns the ID of it
local function play_sound(assetid, pbvolume, pbspeed, looped, delete_when_stopped)
	local sound = Instance.new("Sound")
	sound.SoundId = "rbxassetid://"..assetid
	sound.Volume = pbvolume or 0.5
	sound.PlaybackSpeed = pbspeed or 1
	sound.Looped = looped or false
	sound.Parent = sounds_folder
	sound:Play()
	sound.Ended:Connect(function()
		if delete_when_stopped and type(delete_when_stopped) == "boolean" then
			task.wait(1)
			sound:Destroy()
		end
	end)
	return assetid
end

local current_bgm = ""

local function play_bgm_using_function()
	local bgm_id = getRandomValueFromTable(bgm_ids)
	if bgm_id then
		current_bgm = play_sound(bgm_id, 0.5, 1, true, false)
	end
end

local function toggle_bgm()
	local found_sound = nil
	if not current_bgm then return end
	for _, v in ipairs(sounds_folder:GetChildren()) do
		if v:IsA("Sound") then
			if v.SoundId == "rbxassetid://"..current_bgm then
				found_sound = v
				break
			end
		end
	end
	if not found_sound then return end
	if found_sound.IsPaused then
		found_sound:Resume()
	else
		found_sound:Pause()
	end
end

local function adjust_layout(object, adjust_x, adjust_y)
	local layout = object:FindFirstChildWhichIsA("UIListLayout") or object:FindFirstChildWhichIsA("UIGridLayout")
	local padding = object:FindFirstChildWhichIsA("UIPadding")

	if not layout then
		warn("Layout adjusting error: No UIListLayout or UIGridLayout found inside " .. object.Name)
		return
	end

	local function updateCanvasSize()
		task.wait() -- yield 1 frame so AbsoluteContentSize updates
		local absContentSize = layout.AbsoluteContentSize

		local padX, padY = 0, 0
		if padding then
			padX = (padding.PaddingLeft.Offset + padding.PaddingRight.Offset)
			padY = (padding.PaddingTop.Offset + padding.PaddingBottom.Offset)
		end

		local totalX = absContentSize.X + padX + 10
		local totalY = absContentSize.Y + padY + 10

		if adjust_x and adjust_y then
			object.CanvasSize = UDim2.new(0, totalX, 0, totalY)
		elseif adjust_x then
			object.CanvasSize = UDim2.new(0, totalX, object.CanvasSize.Y.Scale, object.CanvasSize.Y.Offset)
		elseif adjust_y then
			object.CanvasSize = UDim2.new(object.CanvasSize.X.Scale, object.CanvasSize.X.Offset, 0, totalY)
		end
	end

	-- ⏱ Auto-update when children change
	layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvasSize)
	object.ChildAdded:Connect(updateCanvasSize)
	object.ChildRemoved:Connect(updateCanvasSize)

	-- Initial update
	updateCanvasSize()
end

local function set_colors() 
	local current_month = getMonthNumber()
	local current_day = getDayNumber()
	local current_week = getWeekNumber()

	--print(current_month, current_day, current_week)

	local targetColor = Color3.fromRGB(166, 166, 166)
	local targetColor2 = Color3.fromRGB(136, 136, 136)
	local targetColor3 = Color3.fromRGB(91, 91, 91)
	local targetColor4 = Color3.fromRGB(50, 50, 50)

	-- 🎃 October 27 - November 6 → Halloween
	if (current_month == 10 and current_day >= 27) or (current_month == 11 and current_day <= 6) then
		targetColor = Color3.fromRGB(255, 170, 0)
		targetColor2 = Color3.fromRGB(177, 118, 0)
		targetColor3 = Color3.fromRGB(40, 0, 0)
		targetColor4 = Color3.fromRGB(136, 32, 0)

		-- 🦃 November 7 - November 26 → Thanksgiving
	elseif (current_month == 11 and current_day >= 7 and current_day <= 26) then
		targetColor = Color3.fromRGB(255, 151, 47)
		targetColor2 = Color3.fromRGB(255, 79, 20)
		targetColor3 = Color3.fromRGB(80, 60, 0)
		targetColor4 = Color3.fromRGB(80, 70, 59)

		-- 🎄 November 27 - December 26 → Christmas
	elseif (current_month == 11 and current_day >= 27) or (current_month == 12 and current_day <= 26) then
		targetColor = Color3.fromRGB(108, 228, 255)
		targetColor2 = Color3.fromRGB(98, 208, 255)
		targetColor3 = Color3.fromRGB(0, 80, 0)
		targetColor4 = Color3.fromRGB(80, 0, 0)

		-- 🎆 December 27 - January 6 → New Year
	elseif (current_month == 12 and current_day >= 27) or (current_month == 1 and current_day <= 6) then
		targetColor = Color3.fromRGB(255, 255, 0)
		targetColor2 = Color3.fromRGB(0, 255, 255)
		targetColor3 = Color3.fromRGB(0, 0, 60)
		targetColor4 = Color3.fromRGB(50, 50, 50)
	end

	-- 🌈 Apply colors to each frame group
	local function applyColorToUIElement(ui, color)
		if not ui:IsA("GuiObject") then return end

		-- Apply color based on element type
		if ui:IsA("Frame")
			or ui:IsA("ImageLabel")
			or ui:IsA("ImageButton")
			or ui:IsA("ScrollingFrame")
			or ui:IsA("ViewportFrame") then
			ui.BackgroundColor3 = color
		elseif ui:IsA("TextLabel")
			or ui:IsA("TextButton")
			or ui:IsA("TextBox") then
			ui.BackgroundColor3 = color
			-- Optional: also tint text for contrast
			-- ui.TextColor3 = Color3.new(1, 1, 1)
		end
	end

	local function setframecolors()
		for _, ui in ipairs(frame_colors.tc1) do
			applyColorToUIElement(ui, targetColor)
		end
		for _, ui in ipairs(frame_colors.tc2) do
			applyColorToUIElement(ui, targetColor2)
		end
		for _, ui in ipairs(frame_colors.tc3) do
			applyColorToUIElement(ui, targetColor3)
		end
		for _, ui in ipairs(frame_colors.tc4) do
			applyColorToUIElement(ui, targetColor4)
		end
	end

	setframecolors()
end

local main_frame = Instance.new("ScrollingFrame")
main_frame.Size = UDim2.new(0, 250, 0, 210)
main_frame.Position = UDim2.new(0.5, -125, 0.5, -130)
main_frame.Parent = GuiMain

local main_layout = Instance.new("UIListLayout")
main_layout.Padding = UDim.new(0, 5)
main_layout.FillDirection = Enum.FillDirection.Vertical
main_layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
main_layout.VerticalAlignment = Enum.VerticalAlignment.Top
main_layout.SortOrder = Enum.SortOrder.LayoutOrder
main_layout.Parent = main_frame

local buttons_frame = Instance.new("ScrollingFrame")
buttons_frame.Size = UDim2.new(0, 250, 0, 200)
buttons_frame.Position = UDim2.new(0, 0, 0, 200)
buttons_frame.Visible = true
buttons_frame.Parent = GuiMain
buttons_frame.BackgroundTransparency = 0
buttons_frame.ClipsDescendants = true

local buttons_layout = Instance.new("UIListLayout")
buttons_layout.Padding = UDim.new(0, 5)
buttons_layout.FillDirection = Enum.FillDirection.Vertical
buttons_layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
buttons_layout.VerticalAlignment = Enum.VerticalAlignment.Top
buttons_layout.SortOrder = Enum.SortOrder.LayoutOrder
buttons_layout.Parent = buttons_frame

local buttons_toggle = Instance.new("TextButton")
buttons_toggle.Size = UDim2.new(0, 100, 0, 30)
buttons_toggle.Position = UDim2.new(0.5, -50, 0, 40)
buttons_toggle.Text = "Toggle buttons"
buttons_toggle.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
buttons_toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
buttons_toggle.Parent = GuiMain

local scripts_frame = Instance.new("ScrollingFrame")
scripts_frame.Size = UDim2.new(0, 200, 0, 150)
scripts_frame.Position = UDim2.new(0.5, -100, 0.5, -150)
scripts_frame.Visible = false -- hidden by default
scripts_frame.Parent = GuiMain

local scripts_layout = Instance.new("UIListLayout")
scripts_layout.Padding = UDim.new(0, 5)
scripts_layout.FillDirection = Enum.FillDirection.Vertical
scripts_layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
scripts_layout.VerticalAlignment = Enum.VerticalAlignment.Top
scripts_layout.SortOrder = Enum.SortOrder.LayoutOrder
scripts_layout.Parent = scripts_frame

-- 🕹️ QEWASD Frame
local controls_frame = Instance.new("Frame")
controls_frame.Size = UDim2.new(0, 200, 0, 150)
controls_frame.Position = UDim2.new(0.5, -100, 0.5, -150)
controls_frame.Visible = false -- hidden by default
controls_frame.Parent = GuiMain

local soundboard_frame = Instance.new("ScrollingFrame")
soundboard_frame.Size = UDim2.new(0, 200, 0, 200)
soundboard_frame.Position = UDim2.new(0.5, -100, 0.5, -150)
soundboard_frame.Visible = false -- hidden by default
soundboard_frame.Parent = GuiMain

local soundboard_layout = Instance.new("UIGridLayout")
soundboard_layout.Parent = soundboard_frame
soundboard_layout.SortOrder = Enum.SortOrder.Name
soundboard_layout.CellSize = UDim2.new(0, 80, 0, 20)

local SBS_TAG = "SOUNDBOARD_BUTTONS"

local function createSoundboardButtons()
	-- Remove old buttons
	for _, v in ipairs(soundboard_frame:GetChildren()) do
		if v:IsA("TextButton") and CollectionService:HasTag(v, SBS_TAG) then
			v:Destroy()
		end
	end

	-- Create new ones
	for name, id in pairs(sfx_ids) do
		local button = Instance.new("TextButton")
		button.Size = UDim2.new(0, 140, 0, 32)
		button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
		button.TextColor3 = Color3.new(1, 1, 1)
		button.Font = Enum.Font.SourceSansSemibold
		button.TextScaled = true
		button.Text = name
		button.Parent = soundboard_frame
		CollectionService:AddTag(button, SBS_TAG)
		makeUIStyles(button)

		-- Play sound on click
		button.Activated:Connect(function()
			play_sound(id, 1, 1, false, true) -- play_sound(SoundId, Volume, Pitch, Looping)
		end)
	end
end

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.Text = ScriptName.." v"..ScriptVersion.." ["..string.upper(ScriptState).."]"
title.Font = Enum.Font.SourceSansBold
title.TextColor3 = Color3.fromRGB(255, 255, 255)
--title.TextSize = 18
title.Parent = main_frame
title.TextScaled = true

local toggle_button = Instance.new("TextButton")
toggle_button.Size = UDim2.new(0, 30, 0, 30)
toggle_button.Position = UDim2.new(0.5, -15, 0, 10)
toggle_button.Text = "SVe" -- NVe
toggle_button.Font = Enum.Font.SourceSansBold
toggle_button.TextColor3 = Color3.fromRGB(255, 255, 255)
toggle_button.TextSize = 14
toggle_button.Parent = GuiMain

local buttons_is_visible = false

toggle_button.Activated:Connect(function()
	if next(currently_dragged) then return end
	if not GuiMain or not GuiMain.Parent then return end
	if not main_frame or not main_frame.Parent then return end
	if not scripts_frame or not scripts_frame.Parent then return end
	if not controls_frame or not controls_frame.Parent then return end

	if main_frame.Visible then
		buttons_is_visible = buttons_frame.Visible
		main_frame.Visible = false
		scripts_frame.Visible = false
		controls_frame.Visible = false
		controls_frame.Visible = false
		buttons_frame.Visible = false
		buttons_toggle.Visible = false
		soundboard_frame.Visible = false
	else
		main_frame.Visible = true
		buttons_frame.Visible = buttons_is_visible
		buttons_toggle.Visible = true
	end
end)

buttons_toggle.Activated:Connect(function()
	if next(currently_dragged) then return end
	if not GuiMain or not GuiMain.Parent then return end
	if not main_frame or not main_frame.Parent then return end
	if not scripts_frame or not scripts_frame.Parent then return end
	if not controls_frame or not controls_frame.Parent then return end

	if not main_frame.Visible then return end
	if buttons_frame.Visible then
		buttons_frame.Visible = false
	else
		buttons_frame.Visible = buttons_is_visible or true
	end
end)

makeDraggable(toggle_button)
makeUIStyles(toggle_button)
makeDraggable(main_frame)
makeDraggable(controls_frame)
makeUIStyles(main_frame)
makeUIStyles(controls_frame)
makeUIStyles(buttons_frame)
makeDraggable(buttons_frame)
makeUIStyles(scripts_frame)
makeDraggable(scripts_frame)
makeDraggable(buttons_toggle)
makeDraggable(soundboard_frame)
makeUIStyles(soundboard_frame)
adjust_layout(buttons_frame, false, true)
adjust_layout(main_frame, false, true)
adjust_layout(soundboard_frame, true, true)
adjust_layout(scripts_frame, false, true)

-- Global variables
_G.NV_OFFSET = _G.NV_OFFSET or 500
_G.NV_CFSPEED = _G.NV_CFSPEED or 50
_G.NV_OFFSET_BOOL = _G.NV_OFFSET_BOOL or false
_G.NV_SPEED_ENABLED = _G.NV_SPEED_ENABLED or false
_G.NV_SPEED_CONNECTION = _G.NV_SPEED_CONNECTION or nil
_G.NV_DIED = _G.NV_DIED or false

_G.NV_CHARACTER = _G.NV_CHARACTER or nil
_G.NV_HUMANOID = _G.NV_HUMANOID or nil
_G.NV_HRP = _G.NV_HRP or nil
_G.NV_CAM = _G.NV_CAM or nil

-- Y freeze globals
_G.NV_Y_FREEZE_CONNECTION = _G.NV_Y_FREEZE_CONNECTION or nil
_G.NV_SPOOFC_CONNECTION = _G.NV_SPOOFC_CONNECTION or nil
_G.NV_Y_ADJUST_CONNECTION = _G.NV_Y_ADJUST_CONNECTION or nil
_G.NV_FROZEN_Y = _G.NV_FROZEN_Y or 0
_G.NV_Y_FROZEN = _G.NV_Y_FROZEN or false

local offset = _G.NV_OFFSET
local CFSpeed = _G.NV_CFSPEED
local offset_bool = _G.NV_OFFSET_BOOL
local speed_enabled = _G.NV_SPEED_ENABLED
local speed_connection = _G.NV_SPEED_CONNECTION
local died = _G.NV_DIED

local univ_character = _G.NV_CHARACTER
local univ_humanoid = _G.NV_HUMANOID
local univ_hrp = _G.NV_HRP
local univ_cam = _G.NV_CAM

-- Y freeze variables
local y_freeze_connection = _G.NV_Y_FREEZE_CONNECTION
local spoofc_connection = _G.NV_SPOOFC_CONNECTION
local y_adjust_connection = _G.NV_Y_ADJUST_CONNECTION -- 🧠 Adjust frozen Y position gradually
local frozen_y = _G.NV_FROZEN_Y
local y_frozen = _G.NV_Y_FROZEN -- ✅ track Y freeze state

-- ⚡ CFrame speed (includes Q/E support)
local vertical_dir = 0

-- Helper function for textboxes
local function createVariableEditor(name, variable, yPos, callback)
	local container = Instance.new("Frame")
	container.Size = UDim2.new(1, -5, 0, 25)
	container.BackgroundTransparency = 1
	container.Parent = main_frame

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(0.5, -5, 1, 0)
	label.Position = UDim2.new(0, 5, 0, yPos)
	label.BackgroundTransparency = 1
	label.Text = name .. " :"
	label.TextColor3 = Color3.fromRGB(255, 255, 255)
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.Parent = container

	local box = Instance.new("TextBox")
	box.Size = UDim2.new(0.5, -10, 1, 0)
	box.Position = UDim2.new(0.5, 5, 0, yPos)
	box.Text = tostring(variable)
	box.TextColor3 = Color3.fromRGB(255, 255, 255)
	box.ClearTextOnFocus = false
	box.Parent = container

	box.FocusLost:Connect(function()
		local num = tonumber(box.Text)
		if num then
			callback(num)
			box.Text = tostring(num)
		else
			box.Text = tostring(variable)
		end
	end)
end

-- Helper for buttons
local function createButton(text, color, callback)
	local button = Instance.new("TextButton")
	button.Size = UDim2.new(1, -10, 0, 30)
	button.Position = UDim2.new(0, 0, 0, 0)
	button.BackgroundColor3 = color
	button.Text = text
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.Font = Enum.Font.SourceSansBold
	button.TextSize = 16
	button.Parent = buttons_frame

	local stroke = Instance.new("UIStroke")
	stroke.Thickness = 2
	stroke.Parent = button
	table.insert(frame_colors.tc2, stroke)

	button.MouseButton1Click:Connect(function()
		TweenService:Create(button, TweenInfo.new(0.1), {
			BackgroundColor3 = Color3.fromRGB(100, 100, 100)
		}):Play()
		task.wait(0.1)
		TweenService:Create(button, TweenInfo.new(0.2), {
			BackgroundColor3 = color
		}):Play()
		callback()
	end)
end

-- Function to move the character in full 3D relative to the camera
local function moveCharacter(directionVector, dt)
	if not (univ_hrp and univ_cam) then return end

	local camCFrame = univ_cam.CFrame
	local right = camCFrame.RightVector
	local forward = Vector3.new(camCFrame.LookVector.X, 0, camCFrame.LookVector.Z).Unit
	local up = Vector3.new(0, 1, 0)

	local moveVector = right * directionVector.X + forward * directionVector.Z + up * directionVector.Y
	univ_hrp.CFrame += moveVector * (CFSpeed * dt)

	if directionVector.Y ~= 0 then
		frozen_y += directionVector.Y * (CFSpeed / 2) * dt
	end
end

-- Create interactive control button
local function createControlButton(text, x, y, dirVector)
	local button = Instance.new("TextButton")
	button.Size = UDim2.new(0, 50, 0, 50)
	button.Position = UDim2.new(0, x, 0, y)
	button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
	button.TextColor3 = Color3.fromRGB(255, 255, 255)
	button.Font = Enum.Font.SourceSansBold
	button.TextSize = 20
	button.Text = text
	button.Parent = controls_frame

	local stroke = Instance.new("UIStroke")
	stroke.Thickness = 2
	stroke.Parent = button
	table.insert(frame_colors.tc2, stroke)

	-- Move while button is held
	local holding = false
	button.MouseButton1Down:Connect(function()
		holding = true
		while holding do
			local dt = RunService.RenderStepped:Wait()
			moveCharacter(dirVector, dt)
		end
	end)
	button.MouseButton1Up:Connect(function()
		holding = false
	end)
	button.MouseLeave:Connect(function()
		holding = false
	end)
end

-- 🛑 Stop all loops
local function stop_all_loops()
	if speed_connection then
		speed_connection:Disconnect()
		speed_connection = nil
	end
	if y_freeze_connection then
		y_freeze_connection:Disconnect()
		y_freeze_connection = nil
	end
	if spoofc_connection then
		spoofc_connection:Disconnect()
		spoofc_connection = nil
	end
end

-- 💀 Death handling
local function setup_death_connection()
	if not univ_humanoid then return end
	univ_humanoid.Died:Connect(function()
		died = true
		stop_all_loops()
		message("Notice", "You died. Offset/Speed disabled.", 3)
	end)
end

-- ♻ Refresh variables
local function refresh_universal_variables()
	univ_character = player.Character or player.CharacterAdded:Wait()
	univ_humanoid = univ_character:FindFirstChildOfClass("Humanoid")
	univ_hrp = univ_character:FindFirstChild("HumanoidRootPart")
	univ_cam = workspace.CurrentCamera

	died = false
	y_frozen = false

	if univ_character and univ_humanoid and univ_hrp and univ_cam then
		message("Variables Refreshed", "All universal references updated.", 2)
		setup_death_connection()
	else
		warn("[Refresh] Some universal variables could not be found.")
	end
end

refresh_universal_variables()

player.CharacterAdded:Connect(function()
	task.wait(1)
	refresh_universal_variables()
end)

-- 🎥 Camera spoof
local function spoof_cam()
	if spoofc_connection then return end
	spoofc_connection = RunService.Heartbeat:Connect(function()
		if univ_humanoid then
			univ_humanoid.CameraOffset = Vector3.new(0, -offset, 0)
		end
	end)
end

local function stop_spoof_cam()
	if spoofc_connection then
		spoofc_connection:Disconnect()
		spoofc_connection = nil
	end
	if univ_humanoid then
		univ_humanoid.CameraOffset = Vector3.new(0, 0, 0)
	end
end

-- ❄️ Freeze Y
local function freeze_y_axis(hrp)
	if y_freeze_connection then return end
	y_frozen = true
	frozen_y = hrp.Position.Y

	y_freeze_connection = RunService.Heartbeat:Connect(function()
		local pos = hrp.Position
		hrp.Velocity = Vector3.new(hrp.Velocity.X, 0, hrp.Velocity.Z)
		hrp.CFrame = CFrame.new(pos.X, frozen_y, pos.Z) * hrp.CFrame.Rotation
	end)
end

local function unfreeze_y_axis()
	if y_freeze_connection then
		y_freeze_connection:Disconnect()
		y_freeze_connection = nil
	end
	y_frozen = false
	frozen_y = nil
end

-- ⚡ CFrame speed (Q/E vertical movement locked when Y frozen)
local function start_cframe_speed()
	if speed_connection then return end
	speed_connection = RunService.RenderStepped:Connect(function(dt)
		if died then
			speed_connection:Disconnect()
			speed_connection = nil
			return
		end
		if not (univ_humanoid and univ_hrp) then return end

		local finalDir = univ_humanoid.MoveDirection

		if finalDir.Magnitude > 0 then
			univ_hrp.CFrame += finalDir.Unit * (CFSpeed * dt)
		end
	end)
end

local function handle_y_freeze_modification(direction)
	if not y_frozen then return end
	if y_adjust_connection then y_adjust_connection:Disconnect() end

	y_adjust_connection = RunService.Heartbeat:Connect(function(dt)
		if not y_frozen then
			y_adjust_connection:Disconnect()
			y_adjust_connection = nil
			return
		end
		-- Adjust frozen_y smoothly
		frozen_y += direction * (CFSpeed * dt / 2) -- speed factor adjustable
	end)
end

local function stop_y_freeze_modification()
	if y_adjust_connection then
		y_adjust_connection:Disconnect()
		y_adjust_connection = nil
	end
end

local function stop_cframe_speed()
	if speed_connection then
		speed_connection:Disconnect()
		speed_connection = nil
	end
end

-- 🔁 Offset toggle
local function set_offset()
	if died then
		message("Error", "Cannot toggle offset while dead!", 3)
		stop_all_loops()
		return
	end

	if not (univ_character and univ_humanoid and univ_hrp and univ_cam) then
		refresh_universal_variables()
		return
	end

	local offset_local = offset
	local hrp = univ_hrp
	local character = univ_character

	if offset_bool then
		hrp.CFrame = hrp.CFrame * CFrame.new(0, offset_local, 0)
		spoof_cam()
		freeze_y_axis(hrp)
		message("Offset Enabled", "Y movement locked", 3)
	else
		unfreeze_y_axis()
		hrp.CFrame = hrp.CFrame * CFrame.new(0, -offset_local, 0)
		stop_spoof_cam()
		message("Offset Disabled", "Y movement restored", 3)
	end
end

-- 🕹️ Input
InputService.InputBegan:Connect(function(input, processed)
	if processed then return end
	if input.KeyCode == Enum.KeyCode.F2 then
		offset_bool = not offset_bool
		set_offset()
	elseif input.KeyCode == Enum.KeyCode.F3 then
		refresh_universal_variables()
	elseif input.KeyCode == Enum.KeyCode.F4 then
		speed_enabled = not speed_enabled
		if speed_enabled and not died then
			start_cframe_speed()
			message("Speed", "CFrame speed enabled.", 2)
		else
			stop_cframe_speed()
			message("Speed", "CFrame speed disabled.", 2)
		end
	elseif input.KeyCode == Enum.KeyCode.Q then
		handle_y_freeze_modification(-1)
	elseif input.KeyCode == Enum.KeyCode.E then
		handle_y_freeze_modification(1)
	end
end)

local function canRunLoadstring()
	local success, err = pcall(function()
		loadstring("print('hello world')")
	end)
	if success then
		return true
	else
		return false
	end
end

local gamePlaceId = tostring(game.PlaceId)
local BUTTON_TAG = "NV_script_button"

-- 🔗 JSON URL
local scripts_json_url = "https://raw.githubusercontent.com/Buddy-Gian251/Roblox-Invisibility-by-nicehouse10000e/refs/heads/main/scripts.json"

-- 🧠 Function: Load scripts from JSON and create buttons
local function castScriptsFromJSON()
	if not canRunLoadstring() then 
		return 
	end

	if not scripts_json_url or scripts_json_url == "" then
		message("Error", "Missing JSON URL, please provide a JSON URL for your roblox scripts", 4)
		return
	end

	-- Fetch JSON
	local success, result = pcall(function()
		return game:HttpGet(scripts_json_url)
	end)

	if not success then
		message("Error", "Failed to fetch JSON scripts.", 4)
		warn("[NV JSON] Fetch failed:", result)
		return
	end

	-- Decode JSON
	local decodeSuccess, decoded = pcall(function()
		return HttpService:JSONDecode(result)
	end)

	if not decodeSuccess or type(decoded) ~= "table" then
		message("Error", "Invalid JSON structure.", 4)
		warn("[NV JSON] Decode failed:", decoded)
		return
	end

	-- Clear old buttons
	for _, v in ipairs(scripts_frame:GetChildren()) do
		if v:IsA("TextButton") and CollectionService:HasTag(v, BUTTON_TAG) then
			v:Destroy()
		end
	end

	local visibleIndex = 0

	-- Create new buttons
	for _, scriptData in ipairs(decoded) do
		if type(scriptData) ~= "table" then continue end

		local name = tostring(scriptData.name or "Unnamed Script")
		local colorTable = scriptData.color
		local color = Color3.fromRGB(80, 80, 80)
		local specifiedGame = tostring(scriptData.specified_game or "")
		local code = scriptData.code or ""

		if typeof(colorTable) == "table" and #colorTable == 3 then
			color = Color3.fromRGB(colorTable[1], colorTable[2], colorTable[3])
		end

		-- ✅ Game filtering logic
		-- Universal scripts: specified_game == "" or nil
		-- Game-specific: only show if matches game.PlaceId
		if specifiedGame == "" or specifiedGame == "nil" or specifiedGame == tostring(gamePlaceId) then
			visibleIndex += 1

			local text_button = Instance.new("TextButton")
			text_button.Size = UDim2.new(0, 200, 0, 40)
			text_button.Position = UDim2.new(0.5, -100, 0, 50 + ((visibleIndex - 1) * 50))
			text_button.BackgroundColor3 = color
			text_button.Text = name
			text_button.TextColor3 = Color3.new(1, 1, 1)
			--text_button.TextSize = 18
			text_button.Parent = scripts_frame
			text_button.TextScaled = true

			CollectionService:AddTag(text_button, BUTTON_TAG)

			text_button.MouseButton1Click:Connect(function()
				if not canRunLoadstring() then 
					message("Loadstring Error", "Your executor doesn't support loadstring, use another executor and try again")
					return
				end
				local load_success, load_result = pcall(function()
					message("Running Script", name, 2)
					local runSuccess, runError = pcall(function()
						loadstring(code)()
					end)
					if not runSuccess then
						message("Error", "Script failed: " .. tostring(runError), 5)
					end
				end)

				if success then
					message("Success", "Script executed successfully.", 2)
				else
					message("Execute Error", "Failed to run script: " .. tostring(load_result), 5)
				end
			end)
		end
	end
end

-- 📜 Scripts Menu button
createButton("📜 Scripts Menu", Color3.fromRGB(155, 155, 155), function()
	scripts_frame.Visible = not scripts_frame.Visible
	if scripts_frame.Visible then
		castScriptsFromJSON()
	end
end)

InputService.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.Q or input.KeyCode == Enum.KeyCode.E then
		stop_y_freeze_modification()
	end
end)

-- Buttons
createButton("♻ Refresh Variables", Color3.fromRGB(70, 130, 180), function()
	refresh_universal_variables()
end)

createButton("⚡ Start/Stop CFrame Speed", Color3.fromRGB(60, 179, 113), function()
	speed_enabled = not speed_enabled
	if speed_enabled then
		start_cframe_speed()
		message("Speed", "CFrame speed enabled.", 2)
	else
		stop_cframe_speed()
		message("Speed", "CFrame speed disabled.", 2)
	end
end)

createButton("⬆ Toggle Offset", Color3.fromRGB(255, 140, 0), function()
	offset_bool = not offset_bool
	set_offset()
end)

-- Variable editors
createVariableEditor("offset", offset, 40, function(num)
	offset = num
	message("Variable Updated", "offset set to " .. num, 2)
end)

createVariableEditor("CFSpeed", CFSpeed, 70, function(num)
	CFSpeed = num
	message("Variable Updated", "CFSpeed set to " .. num, 2)
end)
createButton("🔊 Soundboard", Color3.fromRGB(90,200,40), function()
	soundboard_frame.Visible = not soundboard_frame.Visible
	if soundboard_frame.Visible then
		createSoundboardButtons()
	end
end)

-- Arrange QEWASD with movement vectors
createControlButton("Q", 10, 10, Vector3.new(0, -1, 0)) -- down
createControlButton("E", 140, 10, Vector3.new(0, 1, 0)) -- up
createControlButton("W", 70, 10, Vector3.new(0, 0, 1)) -- forward
createControlButton("A", 10, 70, Vector3.new(-1, 0, 0)) -- left
createControlButton("S", 70, 70, Vector3.new(0, 0, -1)) -- back
createControlButton("D", 140, 70, Vector3.new(1, 0, 0)) -- right

-- Toggle visibility button
createButton("🎮 Show Controls", Color3.fromRGB(255, 165, 0), function()
	controls_frame.Visible = not controls_frame.Visible
end)

createButton("🎵 Toggle BGM", Color3.fromRGB(128,234,294), function()
	toggle_bgm()
end)

table.insert(frame_colors.tc1, main_frame)
table.insert(frame_colors.tc1, scripts_frame)
table.insert(frame_colors.tc1, controls_frame)
table.insert(frame_colors.tc1, buttons_frame)
table.insert(frame_colors.tc1, toggle_button)
table.insert(frame_colors.tc2, title)
table.insert(frame_colors.tc2, soundboard_frame)

task.spawn(function()
	while true do
		task.wait(4)
		set_colors()
	end
end)
